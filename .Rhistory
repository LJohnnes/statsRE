predictions<-rowMeans(predictions)
error<-sqrt((sum((test$sqftPrice-predictions)^2))/nrow(test))
error
library(foreach)
length_divisor<-4
iterations<-1000
predictions<-foreach(m=1:iterations,.combine=cbind) %do% {
training_positions <- sample(nrow(train), size=floor((nrow(train)/length_divisor)))
train_pos<-1:nrow(train) %in% training_positions
lm_fit<-lm(sqftPrice~age + X..Beds.Total + X..Baths.Half + X..Living + ADOM + List.Price + Price.Diff + sqftList,data=train[train_pos,])
predict(lm_fit,newdata=test)
}
predictions<-rowMeans(predictions)
error<-sqrt((sum((test$sqftPrice-predictions)^2))/nrow(test))
error
library(foreach)
length_divisor<-4
iterations<-1000
predictions<-foreach(m=1:iterations,.combine=cbind) %do% {
training_positions <- sample(nrow(train), size=floor((nrow(train)/length_divisor)))
train_pos<-1:nrow(train) %in% training_positions
lm_fit<-lm(sqftPrice~age + X..Beds.Total + X..Baths.Half + X..Living + ADOM + List.Price + Price.Diff + sqftList,data=train[train_pos,])
predict(lm_fit,test)
}
predictions<-rowMeans(predictions)
error<-sqrt((sum((test$sqftPrice-predictions)^2))/nrow(test))
error
predict <- predict(train_fit, test)
sqrt((sum((test$sqftPrice-predict)^2))/nrow(test))
library(foreach)
length_divisor<-10
iterations<-1000
predictions<-foreach(m=1:iterations,.combine=cbind) %do% {
training_positions <- sample(nrow(train), size=floor((nrow(train)/length_divisor)))
train_pos<-1:nrow(train) %in% training_positions
lm_fit<-lm(sqftPrice~age + X..Beds.Total + X..Baths.Half + X..Living + ADOM + List.Price + Price.Diff + sqftList,data=train[train_pos,])
predict(lm_fit,test)
}
predictions<-rowMeans(predictions)
error<-sqrt((sum((test$sqftPrice-predictions)^2))/nrow(test))
error
library(foreach)
length_divisor<-5
iterations<-1000
predictions<-foreach(m=1:iterations,.combine=cbind) %do% {
training_positions <- sample(nrow(train), size=floor((nrow(train)/length_divisor)))
train_pos<-1:nrow(train) %in% training_positions
lm_fit<-lm(sqftPrice~age + X..Beds.Total + X..Baths.Half + X..Living + ADOM + List.Price + Price.Diff + sqftList,data=train[train_pos,])
predict(lm_fit,test)
}
predictions<-rowMeans(predictions)
error<-sqrt((sum((test$sqftPrice-predictions)^2))/nrow(test))
error
library(foreach)
length_divisor<-50
iterations<-1000
predictions<-foreach(m=1:iterations,.combine=cbind) %do% {
training_positions <- sample(nrow(train), size=floor((nrow(train)/length_divisor)))
train_pos<-1:nrow(train) %in% training_positions
lm_fit<-lm(sqftPrice~age + X..Beds.Total + X..Baths.Half + X..Living + ADOM + List.Price + Price.Diff + sqftList,data=train[train_pos,])
predict(lm_fit,test)
}
predictions<-rowMeans(predictions)
error<-sqrt((sum((test$sqftPrice-predictions)^2))/nrow(test))
error
boot <- boot.relimp(train_fit, b = 10000, type = c("lmg",
"last", "first", "pratt"), rank = TRUE,
diff = TRUE, rela = TRUE)
library(foreach)
length_divisor<-50 #Sampling 1/length_divisor of the data. Tried 5, 10, 20, and 50. 10 gives an equal MSE to the root MSE calculation above
iterations<-10000
predictions<-foreach(m=1:iterations,.combine=cbind) %do% {
training_positions <- sample(nrow(train), size=floor((nrow(train)/length_divisor)))
train_pos<-1:nrow(train) %in% training_positions
lm_fit<-lm(sqftPrice~age + X..Beds.Total + X..Baths.Half + X..Living + ADOM + List.Price + Price.Diff + sqftList,data=train[train_pos,])
predict(lm_fit,test)
}
library(foreach)
length_divisor<-50 #Sampling 1/length_divisor of the data. Tried 5, 10, 20, and 50. 10 gives an equal MSE to the root MSE calculation above
iterations<-5000
predictions<-foreach(m=1:iterations,.combine=cbind) %do% {
training_positions <- sample(nrow(train), size=floor((nrow(train)/length_divisor)))
train_pos<-1:nrow(train) %in% training_positions
lm_fit<-lm(sqftPrice~age + X..Beds.Total + X..Baths.Half + X..Living + ADOM + List.Price + Price.Diff + sqftList,data=train[train_pos,])
predict(lm_fit,test)
}
predictions<-rowMeans(predictions)
error<-sqrt((sum((test$sqftPrice-predictions)^2))/nrow(test))
error
library(foreach)
length_divisor<-50 #Sampling 1/length_divisor of the data. Tried 5, 10, 20, and 50. 10 gives an equal MSE to the root MSE calculation above
iterations<-10000
predictions<-foreach(m=1:iterations,.combine=cbind) %do% {
training_positions <- sample(nrow(train), size=floor((nrow(train)/length_divisor)))
train_pos<-1:nrow(train) %in% training_positions
lm_fit<-lm(sqftPrice~age + X..Beds.Total + X..Baths.Half + X..Living + ADOM + List.Price + Price.Diff + sqftList,data=train[train_pos,])
predict(lm_fit,test)
}
predictions<-rowMeans(predictions)
error<-sqrt((sum((test$sqftPrice-predictions)^2))/nrow(test))
error
library(foreach)
length_divisor<-50 #Sampling 1/length_divisor of the data. Tried 5, 10, 20, and 50. 10 gives an equal MSE to the root MSE calculation above
iterations<-1000
predictions<-foreach(m=1:iterations,.combine=cbind) %do% {
training_positions <- sample(nrow(train), size=floor((nrow(train)/length_divisor)))
train_pos<-1:nrow(train) %in% training_positions
lm_fit<-lm(sqftPrice~age + X..Beds.Total + X..Baths.Half + X..Living + ADOM + List.Price + Price.Diff + sqftList,data=train[train_pos,])
predict(lm_fit,test)
}
predictions<-rowMeans(predictions)
error<-sqrt((sum((test$sqftPrice-predictions)^2))/nrow(test))
error
library(foreach)
length_divisor<-50 #Sampling 1/length_divisor of the data. Tried 5, 10, 20, and 50. 10 gives an equal MSE to the root MSE calculation above
iterations<-1000
predictions<-foreach(m=1:iterations,.combine=cbind) %do% {
training_positions <- sample(nrow(train), size=floor((nrow(train)/length_divisor)))
train_pos<-1:nrow(train) %in% training_positions
lm_fit<-lm(sqftPrice~age + X..Beds.Total + X..Baths.Half + X..Living + ADOM + List.Price + Price.Diff + sqftList,data=train[train_pos,])
predict(lm_fit,test)
}
predictions<-rowMeans(predictions)
error<-sqrt((sum((test$sqftPrice-predictions)^2))/nrow(test))
error
fit <- lm(sqftPrice~age+X..Beds.Total+X..Baths.Full+X..Baths.Half+X..Living+X..Garage.Spaces+X..Living+listMonth+soldMonth+ADOM+CDOM+List.Price+Price.Diff+dayssale+sqftList+relisted,data=data)
step <- stepAIC(fit, direction="both")
step$anova # display results
train<-data[1:184,]  #80% of the data
test<-data[185:230,]  #20% of the data
train_fit <- lm(sqftPrice~age + X..Beds.Total + X..Baths.Half + X..Living + ADOM + List.Price + Price.Diff + sqftList,data=train)
summary(train_fit)
anova(train_fit) # anova table
#Fitting the test
predict <- predict(train_fit, test)
#predict_test <- data.frame(predict(train_fit, test))
#Root MS Error
sqrt((sum((test$sqftPrice-predict)^2))/nrow(test))
sqrt((sum((test$sqftPrice-predict)^2))/nrow(test))
fit <- lm(sqftPrice~age+X..Beds.Total+X..Baths.Full+X..Baths.Half+X..Living+X..Garage.Spaces+X..Living+listMonth+soldMonth+ADOM+CDOM+List.Price+Price.Diff+dayssale+sqftList+relisted,data=data)
step <- stepAIC(fit, direction="both")
library(MASS)
fit <- lm(sqftPrice~age+X..Beds.Total+X..Baths.Full+X..Baths.Half+X..Living+X..Garage.Spaces+X..Living+listMonth+soldMonth+ADOM+CDOM+List.Price+Price.Diff+dayssale+sqftList+relisted,data=data)
step <- stepAIC(fit, direction="both")
step$anova # display results
train<-data[1:184,]  #80% of the data
test<-data[185:230,]  #20% of the data
train_fit <- lm(sqftPrice~age + X..Beds.Total + X..Baths.Half + X..Living + ADOM + List.Price + Price.Diff + sqftList,data=train)
summary(train_fit)
anova(train_fit) # anova table
#Fitting the test
predict <- predict(train_fit, test)
library(dplyr)
library(ggplot2)
library(gridExtra)
library(GGally)
library(stringi)
library(timeDate)
library(arules)
library(data.table)
library(lattice)
library(Hmisc)
library(PerformanceAnalytics)
library(cluster) #clustering
library(rpart)#decision trees
library(boot)#bootstrapping
data <- read.csv('DataMasters-3.csv', dec=",")
dim(data)
#summary(data)
head(data)
#tail(data)
View(data)
data$age <- 2016 - data$Year.Built
data$relisted <- data$CDOM - data$ADOM
data$relisted[data$relisted>0] <- 1
#It was all because of using "/" instead of "-"
soldDates <- as.Date(data$Sold.Lease.Date, format = "%m-%d-%Y")
data$soldMonth <- format(as.Date(soldDates), "%m")
listDate <- soldDates-data$ADOM
data$listMonth <- format(as.Date(listDate), "%m")
data$soldDay <- weekdays(soldDates)
data$Unit.Number <- gsub('[^a-zA-Z0-9.]', '', data$Unit.Number)
data$floor <- stri_extract_first(data$Unit.Number, regex = "\\d")
data$floor <- as.numeric(data$floor)
#removing all sorts of characters (dollar signs in this case) and then changing as numeric
data$Sold.Lease.Price <- gsub('[^a-zA-Z0-9.]', '', data$Sold.Lease.Price)
data$List.Price <- gsub('[^a-zA-Z0-9.]', '', data$List.Price)
data$Price.Diff <- as.numeric(data$Sold.Lease.Price) - as.numeric(data$List.Price)
data$Sold.Lease.Price <- as.numeric(data$Sold.Lease.Price)
data$List.Price <- as.numeric(data$List.Price)
#Condo size as discrete
data$condoSize <- discretize(data$Sqft.Total, "cluster", categories = 3, labels=c("small", "medium", "large"))
#Age as categorical
data$ageCategories <- discretize(data$age, "cluster", categories = 2, labels=c("new", "medium", "old"))
soldDates <- as.Date(data$Sold.Lease.Date, format = "%m-%d-%Y")
data$soldMonth <- format(as.Date(soldDates), "%m")
ccidate <- as.Date(cci$TIME, format = "%Y-%m")
data$dayssale<-soldDates-listDate
data$salesDuration <- discretize(data$age, "cluster", categories = 2, labels=c("short", "long"))
#sqft price
data$S...SF <- gsub('[^a-zA-Z0-9.]', '', data$S...SF)
data$sqftPrice <- as.numeric(data$S...SF)
#data$ccilisted
#sqft list price
data$sqftList <- as.numeric(data$LP.SqFt)
#data$ccisold
```
#EXPLORATORY ANALYSIS
#Univariate
#Univariate Quantitative
#Measures of Central Tendency
```{r Measures of Central Tendency, echo=FALSE}
summary(data)
"""
summary(data$Sold.Lease.Price)
summary(data$List.Price)
summary(data$Price.Diff)
summary(data$age)
summary(data$ADOM)
summary(data$CDOM)
"""
```
library(MASS)
fit <- lm(sqftPrice~age+X..Beds.Total+X..Baths.Full+X..Baths.Half+X..Living+X..Garage.Spaces+X..Living+listMonth+soldMonth+ADOM+CDOM+List.Price+Price.Diff+dayssale+sqftList+relisted,data=data)
step <- stepAIC(fit, direction="both")
step$anova # display results
train<-data[1:184,]  #80% of the data
test<-data[185:230,]  #20% of the data
train_fit <- lm(sqftPrice~age + X..Beds.Total + X..Baths.Half + X..Living + ADOM + List.Price + Price.Diff + sqftList,data=train)
summary(train_fit)
anova(train_fit) # anova table
predict <- predict(train_fit, test)
sqrt((sum((test$sqftPrice-predict)^2))/nrow(test))
layout(matrix(c(1,2,3,4),2,2))
plot(train_fit)
outlierTest(train_fit)
qqPlot(train_fit, main="QQ Plot")
leveragePlots(train_fit)
outlierTest(train_fit)
library(foreach)
length_divisor<-50 #Sampling 1/length_divisor of the data. Tried 5, 10, 20, and 50. 10 gives an equal MSE to the root MSE calculation above
iterations<-1000
predictions<-foreach(m=1:iterations,.combine=cbind) %do% {
training_positions <- sample(nrow(train), size=floor((nrow(train)/length_divisor)))
train_pos<-1:nrow(train) %in% training_positions
lm_fit<-lm(sqftPrice~age + X..Beds.Total + X..Baths.Half + X..Living + ADOM + List.Price + Price.Diff + sqftList,data=train[train_pos,])
predict(lm_fit,test)
}
predictions<-rowMeans(predictions)
error<-sqrt((sum((test$sqftPrice-predictions)^2))/nrow(test))
error
library(foreach)
length_divisor<-10 #Sampling 1/length_divisor of the data. Tried 5, 10, 20, and 50. 10 gives an equal MSE to the root MSE calculation above
iterations<-1000
predictions<-foreach(m=1:iterations,.combine=cbind) %do% {
training_positions <- sample(nrow(train), size=floor((nrow(train)/length_divisor)))
train_pos<-1:nrow(train) %in% training_positions
lm_fit<-lm(sqftPrice~age + X..Beds.Total + X..Baths.Half + X..Living + ADOM + List.Price + Price.Diff + sqftList,data=train[train_pos,])
predict(lm_fit,test)
}
predictions<-rowMeans(predictions)
error<-sqrt((sum((test$sqftPrice-predictions)^2))/nrow(test))
error
library(foreach)
length_divisor<-10 #Sampling 1/length_divisor of the data. Tried 5, 10, 20, and 50. 10 gives an equal MSE to the root MSE calculation above
iterations<-1000
predictions<-foreach(m=1:iterations,.combine=cbind) %do% {
training_positions <- sample(nrow(train), size=floor((nrow(train)/length_divisor)))
train_pos<-1:nrow(train) %in% training_positions
lm_fit<-lm(sqftPrice~age + X..Beds.Total + X..Baths.Half + X..Living + ADOM + List.Price + Price.Diff + sqftList,data=train[train_pos,])
predict(lm_fit,test)
}
predictions<-rowMeans(predictions)
error<-sqrt((sum((test$sqftPrice-predictions)^2))/nrow(test))
error
library(foreach)
length_divisor<-10 #Sampling 1/length_divisor of the data. Tried 5, 10, 20, and 50. 10 gives an equal MSE to the root MSE calculation above
iterations<-1000
predictions<-foreach(m=1:iterations,.combine=cbind) %do% {
training_positions <- sample(nrow(train), size=floor((nrow(train)/length_divisor)))
train_pos<-1:nrow(train) %in% training_positions
lm_fit<-lm(sqftPrice~age + X..Beds.Total + X..Baths.Half + X..Living + ADOM + List.Price + Price.Diff + sqftList,data=train[train_pos,])
predict(lm_fit,test)
}
predictions<-rowMeans(predictions)
error<-sqrt((sum((test$sqftPrice-predictions)^2))/nrow(test))
error
library(foreach)
length_divisor<-10 #Sampling 1/length_divisor of the data. Tried 5, 10, 20, and 50. 10 gives an equal MSE to the root MSE calculation above
iterations<-1000
predictions<-foreach(m=1:iterations,.combine=cbind) %do% {
training_positions <- sample(nrow(train), size=floor((nrow(train)/length_divisor)))
train_pos<-1:nrow(train) %in% training_positions
lm_fit<-lm(sqftPrice~age + X..Beds.Total + X..Baths.Half + X..Living + ADOM + List.Price + Price.Diff + sqftList,data=train[train_pos,])
predict(lm_fit,test)
}
predictions<-rowMeans(predictions)
error<-sqrt((sum((test$sqftPrice-predictions)^2))/nrow(test))
error
library(foreach)
length_divisor<-10 #Sampling 1/length_divisor of the data. Tried 5, 10, 20, and 50. 10 gives an equal MSE to the root MSE calculation above
iterations<-1000
predictions<-foreach(m=1:iterations,.combine=cbind) %do% {
training_positions <- sample(nrow(train), size=floor((nrow(train)/length_divisor)))
train_pos<-1:nrow(train) %in% training_positions
lm_fit<-lm(sqftPrice~age + X..Beds.Total + X..Baths.Half + X..Living + ADOM + List.Price + Price.Diff + sqftList,data=train[train_pos,])
predict(lm_fit,test)
}
predictions<-rowMeans(predictions)
error<-sqrt((sum((test$sqftPrice-predictions)^2))/nrow(test))
error
leveragePlots(train_fit)
library(MASS)
leveragePlots(train_fit)
library(dplyr)
library(ggplot2)
library(car)
outlierTest(train_fit)
qqPlot(train_fit, main="QQ Plot")
leveragePlots(train_fit)
plot(train_fit)
sqrt((sum((test$sqftPrice-predict)^2))/nrow(test))
library(foreach)
length_divisor<-10 #Sampling 1/length_divisor of the data. Tried 5, 10, 20, and 50.
iterations<-1000
predictions<-foreach(m=1:iterations,.combine=cbind) %do% {
training_positions <- sample(nrow(train), size=floor((nrow(train)/length_divisor)))
train_pos<-1:nrow(train) %in% training_positions
lm_fit<-lm(sqftPrice~age + X..Beds.Total + X..Baths.Half + X..Living + ADOM + List.Price + Price.Diff + sqftList,data=train[train_pos,])
predict(lm_fit,test)
}
predictions<-rowMeans(predictions)
error<-sqrt((sum((test$sqftPrice-predictions)^2))/nrow(test))
error
library(foreach)
length_divisor<-50 #Sampling 1/length_divisor of the data. Tried 5, 10, 20, and 50.
iterations<-1000
predictions<-foreach(m=1:iterations,.combine=cbind) %do% {
training_positions <- sample(nrow(train), size=floor((nrow(train)/length_divisor)))
train_pos<-1:nrow(train) %in% training_positions
lm_fit<-lm(sqftPrice~age + X..Beds.Total + X..Baths.Half + X..Living + ADOM + List.Price + Price.Diff + sqftList,data=train[train_pos,])
predict(lm_fit,test)
}
predictions<-rowMeans(predictions)
error<-sqrt((sum((test$sqftPrice-predictions)^2))/nrow(test))
error
library(foreach)
length_divisor<-50 #Sampling 1/length_divisor of the data. Tried 5, 10, 20, and 50.
iterations<-1000
predictions<-foreach(m=1:iterations,.combine=cbind) %do% {
training_positions <- sample(nrow(train), size=floor((nrow(train)/length_divisor)))
train_pos<-1:nrow(train) %in% training_positions
lm_fit<-lm(sqftPrice~age + X..Beds.Total + X..Baths.Half + X..Living + ADOM + List.Price + Price.Diff + sqftList,data=train[train_pos,])
predict(lm_fit,test)
}
predictions<-rowMeans(predictions)
error<-sqrt((sum((test$sqftPrice-predictions)^2))/nrow(test))
error
library(foreach)
length_divisor<-50 #Sampling 1/length_divisor of the data. Tried 5, 10, 20, and 50.
iterations<-1000
predictions<-foreach(m=1:iterations,.combine=cbind) %do% {
training_positions <- sample(nrow(train), size=floor((nrow(train)/length_divisor)))
train_pos<-1:nrow(train) %in% training_positions
lm_fit<-lm(sqftPrice~age + X..Beds.Total + X..Baths.Half + X..Living + ADOM + List.Price + Price.Diff + sqftList,data=train[train_pos,])
predict(lm_fit,test)
}
predictions<-rowMeans(predictions)
error<-sqrt((sum((test$sqftPrice-predictions)^2))/nrow(test))
error
library(foreach)
length_divisor<-50 #Sampling 1/length_divisor of the data. Tried 5, 10, 20, and 50.
iterations<-1000
predictions<-foreach(m=1:iterations,.combine=cbind) %do% {
training_positions <- sample(nrow(train), size=floor((nrow(train)/length_divisor)))
train_pos<-1:nrow(train) %in% training_positions
training_fit<-lm(sqftPrice~age + X..Beds.Total + X..Baths.Half + X..Living + ADOM + List.Price + Price.Diff + sqftList,data=train[train_pos,])
predict(training_fit,test)
}
predictions<-rowMeans(predictions)
error<-sqrt((sum((test$sqftPrice-predictions)^2))/nrow(test))
error
library(foreach)
length_divisor<-10 #Sampling 1/length_divisor of the data. Tried 5, 10, 20, and 50.
iterations<-1000
predictions<-foreach(m=1:iterations,.combine=cbind) %do% {
training_positions <- sample(nrow(train), size=floor((nrow(train)/length_divisor)))
train_pos<-1:nrow(train) %in% training_positions
training_fit<-lm(sqftPrice~age + X..Beds.Total + X..Baths.Half + X..Living + ADOM + List.Price + Price.Diff + sqftList,data=train[train_pos,])
predict(training_fit,test)
}
predictions<-rowMeans(predictions)
error<-sqrt((sum((test$sqftPrice-predictions)^2))/nrow(test))
error
library(foreach)
length_divisor<-10 #Sampling 1/length_divisor of the data. Tried 5, 10, 20, and 50.
iterations<-1000
predictions<-foreach(m=1:iterations,.combine=cbind) %do% {
training_positions <- sample(nrow(train), size=floor((nrow(train)/length_divisor)))
train_pos<-1:nrow(train) %in% training_positions
training_fit<-lm(sqftPrice~age + X..Beds.Total + X..Baths.Half + X..Living + ADOM + List.Price + Price.Diff + sqftList,data=train[train_pos,])
predict(training_fit,test)
}
predictions<-rowMeans(predictions)
error<-sqrt((sum((test$sqftPrice-predictions)^2))/nrow(test))
error
library(foreach)
length_divisor<-10 #Sampling 1/length_divisor of the data. Tried 5, 10, 20, and 50.
iterations<-1000
predictions<-foreach(m=1:iterations,.combine=cbind) %do% {
training_positions <- sample(nrow(train), size=floor((nrow(train)/length_divisor)))
train_pos<-1:nrow(train) %in% training_positions
training_fit<-lm(sqftPrice~age + X..Beds.Total + X..Baths.Half + X..Living + ADOM + List.Price + Price.Diff + sqftList,data=train[train_pos,])
predict(training_fit,test)
}
predictions<-rowMeans(predictions)
error<-sqrt((sum((test$sqftPrice-predictions)^2))/nrow(test))
error
fit <- lm(Sold.Lease.Price~age+X..Beds.Total+X..Baths.Full+X..Baths.Half+X..Living+X..Garage.Spaces+X..Living+listMonth+soldMonth+ADOM+CDOM+List.Price+Price.Diff+dayssale+sqftList+relisted,data=data)
step <- stepAIC(fit, direction="both")
step$anova # display results
train<-data[1:184,]  #80% of the data
test<-data[185:230,]  #20% of the data
train_fit <- lm(Sold.Lease.Price ~ age + X..Beds.Total + X..Baths.Full + X..Baths.Half + X..Living + X..Garage.Spaces + soldMonth + CDOM + List.Price +
Price.Diff,data=train)
summary(train_fit)
anova(train_fit) # anova table
vif(fit) # variance inflation factors
sqrt(vif(fit)) > 2 # problem?
fit <- lm(sqftPrice~age+X..Beds.Total+X..Baths.Full+X..Baths.Half+X..Living+X..Garage.Spaces+X..Living+listMonth+soldMonth+ADOM+CDOM+List.Price+Price.Diff+dayssale+sqftList+relisted,data=data)
#Multicollinearity
vif(fit) # variance inflation factors
vif(train_fit) # variance inflation factors
sqrt(train_fit)) > 2 # problem?
sqrt((train_fit)) > 2 # problem?
sqrt(vif(train_fit)) > 2 # problem?
vif(train_fit) # variance inflation factors
sqrt(vif(train_fit)) > 2 # problem?
fit <- lm(sqftPrice~age+X..Beds.Total+X..Baths.Full+X..Baths.Half+X..Living+X..Garage.Spaces+X..Living+listMonth+soldMonth+ADOM+CDOM+List.Price+Price.Diff+dayssale+sqftList+relisted,data=data)
step <- stepAIC(fit, direction="both")
step$anova # display results
train<-data[1:184,]  #80% of the data
test<-data[185:230,]  #20% of the data
train_fit <- lm(sqftPrice~age + X..Beds.Total + X..Baths.Half + X..Living + ADOM + List.Price + Price.Diff + sqftList,data=train)
summary(train_fit)
anova(train_fit) # anova table
predict <- predict(train_fit, test)
sqrt((sum((test$sqftPrice-predict)^2))/nrow(test))
vif(train_fit) # variance inflation factors
sqrt(vif(train_fit)) > 2 # problem?
step <- stepAIC(fit, direction="both")
step$anova # display results
step <- stepAIC(fit, direction="both")
step$anova # display results
train<-data[1:184,]  #80% of the data
test<-data[185:230,]  #20% of the data
train_fit <- lm(sqftPrice~age + X..Beds.Total + X..Baths.Half + X..Living + ADOM + List.Price + Price.Diff + sqftList,data=train)
summary(train_fit)
anova(train_fit) # anova table
predict <- predict(train_fit, test)
sqrt((sum((test$sqftPrice-predict)^2))/nrow(test))
layout(matrix(c(1,2,3,4),2,2))
plot(train_fit)
outlierTest(train_fit)
qqPlot(train_fit, main="QQ Plot")
leveragePlots(train_fit)
bs <- function(formula, data, indices) {
d <- data[indices,] # allows boot to select sample
fit <- lm(formula, data=d)
return(coef(fit))
}
results <- boot(data=train, statistic=bs,
R=1000, formula=sqftPrice~age + X..Beds.Total + X..Baths.Half + X..Living + ADOM + List.Price + Price.Diff)
results
plot(results, index=1) #intercept
boot.ci(results, type='bca', index=1) # intercept
boot.ci(results, type='bca', index=2) # age
boot.ci(results, type='bca', index=3) # X..Beds.Total
boot.ci(results, type='bca', index=4) # X..Baths.Half
boot.ci(results, type='bca', index=5) # X..Living
boot.ci(results, type='bca', index=6) # ADOM
boot.ci(results, type='bca', index=7) # List.Price
boot.ci(results, type='bca', index=8) # Price.Diff
calc.relimp(train_fit,type=c("lmg","last","first","pratt"),
rela=TRUE)
boot <- boot.relimp(train_fit, b = 1000, type = c("lmg",
"last", "first", "pratt"), rank = TRUE,
diff = TRUE, rela = TRUE)
booteval.relimp(boot)
plot(booteval.relimp(boot,sort=TRUE))
boot <- boot.relimp(train_fit, b = 1000, type = c("lmg",
"last", "first", "pratt"), rank = TRUE,
diff = TRUE, rela = TRUE)
booteval.relimp(boot)
plot(booteval.relimp(boot,sort=TRUE))
boot <- boot.relimp(train_fit, b = 1000, type = c("lmg",
"last", "first", "pratt"), rank = TRUE,
diff = TRUE, rela = TRUE)
booteval.relimp(boot) # print result
plot(booteval.relimp(boot,sort=TRUE)) # plot result
plot(booteval.relimp(boot,sort=TRUE)) # plot result
length_divisor<-10 #Sampling 1/length_divisor of the data. Tried 5, 10, 20, and 50.
iterations<-1000
predictions<-foreach(m=1:iterations,.combine=cbind) %do% {
training_positions <- sample(nrow(train), size=floor((nrow(train)/length_divisor)))
train_pos<-1:nrow(train) %in% training_positions
training_fit<-lm(sqftPrice~age + X..Beds.Total + X..Baths.Half + X..Living + ADOM + List.Price + Price.Diff + sqftList,data=train[train_pos,])
predict(training_fit,test)
}
predictions<-rowMeans(predictions)
error<-sqrt((sum((test$sqftPrice-predictions)^2))/nrow(test))
error
